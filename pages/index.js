import Head from "next/head";
// import Image from "next/image";
// import Link from "next/link";
import { useRouter } from "next/router";
import { useState, useEffect } from "react";
import { checkAuthentication, removeLocalStorage } from "../actions/auth";
import { getAllTodos } from "../actions/todo";
import { addTodo } from "../actions/todo";
import { deleteTodo } from "../actions/todo";
import { updateTodo } from "../actions/todo";
import "../styles/Home.module.css";

export default function Home() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [userData, setUserData] = useState({});
  const [todos, setTodos] = useState([]);
  const [taskName, setTaskName] = useState("");
  // const [loading, setLoading] = useState(true);
  // const [isCompleted, SetIsCompleted] = useState(false);
  const router = useRouter();

  const LoadTodos = async () => {
    const allTodos = await getAllTodos();

    if (allTodos.status === 200) {
      const todoData = await allTodos.json();
      // console.log(todoData.tasks);
      setTodos(todoData.tasks);
    } else {
      alert("Not able to fetch tasks! Error Occurred");
    }
  };

  useEffect(() => {
    const response = async () => {
      const resjson = await checkAuthentication();
      setUserData(resjson.user);
      if (resjson.userAuthenticated) {
        setIsAuthenticated(true);
        LoadTodos();
        //await LoadTodos();
        // setLoading(false);
      } else {
        router.push("/login");
      }
    };
    response();
  }, []);

  const handleLogout = () => {
    alert("are you sure want to log out");
    setIsAuthenticated(!removeLocalStorage("auth-token"));
    router.push("/login");
  };

  const HandleAddTask = async () => {
    const response = await addTodo(taskName);
    if (response.status === 200) {
      const resjson = await response.json();
      // console.log(resjson);
      alert(resjson.message);
      LoadTodos();
    } else {
      alert("Task not added! Error Occurred");
    }
    setTaskName("");
  };

  const handleId = async (TaskId) => {
    // console.log(TaskId)
    const response = await deleteTodo(TaskId);
    if (response.status === 200) {
      const resjson = await response.json();
      // console.log(resjson);
      alert(resjson.message);
      LoadTodos();
    } else {
      alert("Task not deleted! Error Occurred");
    }
  };

  const handleTaskUdate = async (event, task) => {
    task.isCompleted = event.target.checked;
    const response = await updateTodo(task);
    if (response.status === 200) {
      const resjson = await response.json();
      // console.log(resjson);
      alert(resjson.message);
      LoadTodos();
    } else {
      alert("Task not updated! Error Occurred");
    }
  };

  return (
    <>
      {isAuthenticated ? (
        <div>
          <Head>
            <title>Todo App</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <div>
            <label>Hey {userData.name.toUpperCase()} !</label>

            <button
              className="bg-red-500 px-3 py-1 rounded-sm text-white font-semibold"
              onClick={handleLogout}
            >
              Logout
            </button>
          </div>

          <main>
            <div>
              <input
                className="px-3 py-1 m-2 border border-black"
                type="text"
                value={taskName}
                onChange={(event) => {
                  setTaskName(event.target.value);
                }}
                placeholder="Enter Task To Add"
              />

              <button
                className="bg-blue-500 px-3 py-1 rounded-sm text-white font-semibold"
                onClick={HandleAddTask}
              >
                Add Task
              </button>
            </div>

            <div>
              {todos.map((tasks) => {
                return (
                  <div key={tasks._id}>
                    <h3>{tasks.task}</h3>
                    <label>Status : Is Completed</label>
                    <input
                      type="checkbox"
                      checked={tasks.isCompleted}
                      onChange={(e) => {
                        handleTaskUdate(e, tasks);
                      }}
                    />
                    <h3>{tasks.date}</h3>
                    <button
                      className="bg-orange-500 px-3 py-1 rounded-lg text-white font-semibold"
                      onClick={() => {
                        handleId(tasks._id);
                      }}
                    >
                      Delete Task
                    </button>
                  </div>
                );
              })}
            </div>
          </main>
        </div>
      ) : (
        <>
          <div>Loading.........</div>
          <Head>
            <title>Loading...</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
        </>
      )}
    </>
  );
}
